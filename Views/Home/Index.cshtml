@model IEnumerable<Car>
@using CarRental3._0.Models
@using System.Globalization

@{
    ViewData["Title"] = "Home Page";
}

<section class="hero-section">
    <div class="container">
        <div class="hero-content">
            <h1>Наемете Перфектната Кола за Вашето Пътуване</h1>
            <h2>Разгледайте нашата широка гама от автомобили на ненадминати цени.</h2>
            <div class="hero-buttons">
                <a href="/Car/Index" class="btn btn-primary">Наеми сега</a>
                <a href="/About" class="btn btn-secondary">Научи повече</a>
            </div>
        </div>
    </div>
</section>

<section class="featured-cars">
    <div class="container">
        <h2>Препоръчани Автомобили</h2>
        <div class="carousel-container">
            <div class="carousel-track">
                @if (Model != null && Model.Any())
                {
                    var cars = Model.ToList();
                    var loopCars = cars.Concat(cars.Take(3)).ToList();

                    foreach (var car in loopCars)
                    {
                        <div class="car-card">
                            <img src="@car.ImagePath" alt="@car.Brand @car.Model" class="img-fluid">
                            <h3>@car.Brand @car.Model</h3>
                            <p>@car.DailyRate.ToString("C", new CultureInfo("bg-BG"))/ден</p>
                            <a href="/Car/Detail/@car.CarId" class="btn btn-primary">Наеми</a>
                        </div>
                    }
                }
                else
                {
                    <p class="no-cars">В момента няма налични автомобили.</p>
                }
            </div>
        </div>
        <div class="carousel-nav">
            <button class="carousel-prev">←</button>
            <button class="carousel-next">→</button>
        </div>
    </div>
</section>

<section class="why-choose-us">
    <div class="container">
        <h2>Защо да изберете нас?</h2>
        <div class="benefits-grid">
            <div class="benefit-card">
                <i class="fas fa-tag"></i>
                <h3>Достъпни Цени</h3>
                <p>Получете най-добрите оферти за коли под наем.</p>
            </div>
            <div class="benefit-card">
                <i class="fas fa-car"></i>
                <h3>Голям Избор</h3>
                <p>Изберете от разнообразие от автомобили.</p>
            </div>
            <div class="benefit-card">
                <i class="fas fa-headset"></i>
                <h3>24/7 Поддръжка</h3>
                <p>Винаги сме на разположение да ви помогнем.</p>
            </div>
        </div>
    </div>
</section>

<section class="reviews-section">
    <div class="container">
        <h2>Какво казват нашите клиенти</h2>
        <div class="reviews-container">
            <div id="topReviews"></div>

            @if (User.Identity.IsAuthenticated)
            {
                <div class="review-form">
                    <h3>Оставете отзив</h3>
                    <form id="reviewForm">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <label>Оценка:</label>
                            <div class="star-rating">
                                <input type="radio" id="5-stars" name="Rating" value="5" checked />
                                <label for="5-stars" class="star">★</label>
                                <input type="radio" id="4-stars" name="Rating" value="4" />
                                <label for="4-stars" class="star">★</label>
                                <input type="radio" id="3-stars" name="Rating" value="3" />
                                <label for="3-stars" class="star">★</label>
                                <input type="radio" id="2-stars" name="Rating" value="2" />
                                <label for="2-stars" class="star">★</label>
                                <input type="radio" id="1-star" name="Rating" value="1" />
                                <label for="1-star" class="star">★</label>
                            </div>
                        </div>
                        <div class="form-group">
                            <textarea name="Comment" class="form-control" placeholder="Вашият отзив..." required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Прати</button>
                    </form>
                    <div id="reviewSuccess" class="alert alert-success mt-3" style="display:none;"></div>
                </div>
            }
            else
            {
                <p>Моля <a href="/Account/Login">впишете се</a> за да оставите отзив.</p>
            }
        </div>
    </div>
</section>

<footer class="footer">
    <div class="container">
        <div class="footer-links">
            <a href="/">Начало</a>
            <a href="/Home/About">За нас</a>
        </div>
        <div class="contact-info">
            <p>Адрес: ул. Коли-под-наемска 123, София, България</p>
            <p>Телефон: +359 123 456 789</p>
            <p>Имейл: info@carrental.com</p>
        </div>
    </div>
</footer>


@section Styles {
    <style>
        /* Hero Section */
        .hero-section {
            background: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url('https://www.nextgearcapital.com/wp-content/uploads/sites/2/2020/04/Dollarphotoclub_85133296.jpg');
            background-size: cover;
            background-position: center;
            color: white;
            padding: 100px 0;
            text-align: center;
        }

        .hero-content h1 {
            font-size: 2.5rem;
            margin-bottom: 20px;
        }

        .hero-content h2 {
            font-size: 1.5rem;
            margin-bottom: 30px;
            font-weight: 300;
        }

        .hero-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        /* Featured Cars */
        .featured-cars {
            padding: 60px 0;
            background: #f8f9fa;
            position: relative;
        }

        .carousel-container {
            overflow: hidden;
            position: relative;
            margin: 0 auto;
            max-width: 1200px;
        }

        .carousel-track {
            display: flex;
            transition: transform 0.5s ease;
            gap: 20px;
            padding: 20px 0;
        }

        .car-card {
            flex: 0 0 300px;
            background: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }

            .car-card:hover {
                transform: translateY(-5px);
            }

            .car-card img {
                width: 100%;
                height: 180px;
                object-fit: cover;
                border-radius: 5px;
            }

            .car-card h3 {
                margin: 10px 0 5px;
            }

            .car-card p {
                margin-bottom: 15px;
                font-weight: bold;
            }

        .carousel-nav {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }

        .carousel-prev,
        .carousel-next {
            background: #0d6efd;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            font-size: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .carousel-prev:hover,
            .carousel-next:hover {
                background: #0b5ed7;
            }

        .no-cars {
            text-align: center;
            width: 100%;
            padding: 40px 0;
            font-size: 1.2rem;
            color: #666;
        }



        /* Why Choose Us */
        .why-choose-us {
            padding: 60px 0;
            text-align: center;
        }

        .benefits-grid {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 30px;
            margin-top: 30px;
        }

        .benefit-card {
            flex: 1;
            min-width: 250px;
            max-width: 350px;
            padding: 30px 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

            .benefit-card i {
                font-size: 2.5rem;
                color: #0d6efd;
                margin-bottom: 15px;
            }

        /* Reviews Section */
        .reviews-section {
            padding: 60px 0;
            background: #f8f9fa;
        }

        .reviews-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .review-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .review-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .user-info {
            display: flex;
            flex-direction: column;
        }

        .user-name {
            font-weight: bold;
        }

        .rating {
            color: #ffc107;
            font-size: 18px;
        }

        .review-date {
            color: #666;
            font-size: 14px;
        }

        .review-content p {
            margin: 0;
        }

        .review-form {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-top: 30px;
        }

        .star-rating {
            display: flex;
            flex-direction: row-reverse;
            justify-content: flex-end;
        }

            .star-rating input {
                display: none;
            }

            .star-rating label {
                font-size: 24px;
                color: #ddd;
                cursor: pointer;
                padding: 0 5px;
            }

                .star-rating input:checked ~ label,
                .star-rating label:hover,
                .star-rating label:hover ~ label {
                    color: #ffc107;
                }

        /* Footer */
        .footer {
            background: #343a40;
            color: white;
            padding: 40px 0;
        }

        .footer-links {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }

            .footer-links a {
                color: white;
                text-decoration: none;
            }

        .social-media {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
        }

            .social-media a {
                color: white;
                font-size: 1.5rem;
            }

        .contact-info {
            text-align: center;
        }

            .contact-info p {
                margin: 5px 0;
            }

        @@media (max-width: 768px) {
            .hero-content h1 {
                font-size: 2rem;
            }

            .hero-content h2 {
                font-size: 1.2rem;
            }

            .car-card {
                flex: 0 0 250px;
            }
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Carousel functionality with infinite loop
            const track = document.querySelector('.carousel-track');
            const cards = document.querySelectorAll('.car-card');
            const nextBtn = document.querySelector('.carousel-next');
            const prevBtn = document.querySelector('.carousel-prev');

            if (cards.length > 0) {
                const cardWidth = cards[0].offsetWidth + 20; // including gap
                let currentPosition = 0;
                let autoRotate;
                const originalCardsCount = @(Model?.Count() ?? 0);
                const totalCards = cards.length;

                // Initialize position
                track.style.transform = `translateX(${currentPosition}px)`;

                function moveToPosition(position) {
                    track.style.transition = 'transform 0.5s ease';
                    track.style.transform = `translateX(${position}px)`;

                    // Check if we need to reset position for infinite loop
                    setTimeout(() => {
                        // If we're at the cloned end, jump to original start without animation
                        if (position <= -(totalCards - 3) * cardWidth) {
                            track.style.transition = 'none';
                            currentPosition = -((originalCardsCount - 3) * cardWidth);
                            track.style.transform = `translateX(${currentPosition}px)`;
                        }
                        // If we're at the cloned start, jump to original end without animation
                        else if (position > 0) {
                            track.style.transition = 'none';
                            currentPosition = -((originalCardsCount - 3) * cardWidth);
                            track.style.transform = `translateX(${currentPosition}px)`;
                        }
                    }, 500);
                }

                function startAutoRotate() {
                    autoRotate = setInterval(() => {
                        currentPosition -= cardWidth;
                        moveToPosition(currentPosition);
                    }, 5000);
                }

                // Start auto-rotation
                startAutoRotate();

                nextBtn.addEventListener('click', () => {
                    clearInterval(autoRotate);
                    currentPosition -= cardWidth;
                    moveToPosition(currentPosition);
                    startAutoRotate();
                });

                prevBtn.addEventListener('click', () => {
                    clearInterval(autoRotate);
                    currentPosition += cardWidth;
                    moveToPosition(currentPosition);
                    startAutoRotate();
                });

                // Pause auto-rotation on hover
                track.addEventListener('mouseenter', () => {
                    clearInterval(autoRotate);
                });

                track.addEventListener('mouseleave', () => {
                    startAutoRotate();
                });

                // Reset position when window resizes
                window.addEventListener('resize', () => {
                    const newCardWidth = cards[0].offsetWidth + 20;
                    if (Math.abs(newCardWidth - cardWidth) > 5) { // Only reset if significant change
                        track.style.transition = 'none';
                        track.style.transform = `translateX(${currentPosition}px)`;
                    }
                });
            }
            // Review system
            function loadReviews() {
                fetch('/Review/GetTopReviews')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(reviews => {
                        const container = document.getElementById('topReviews');
                        container.innerHTML = '';

                        if (reviews && reviews.length > 0) {
                            reviews.forEach(review => {
                                const reviewDate = new Date(review.createdAt);
                                const formattedDate = reviewDate.toLocaleDateString('bg-BG', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric'
                                });

                                container.innerHTML += `
                                    <div class="review-card">
                                        <div class="review-header">
                                            <div class="user-info">
                                                <span class="user-name">${review.user.fullName}</span>
                                                <div class="rating">
                                                    ${'★'.repeat(review.rating)}${'☆'.repeat(5 - review.rating)}
                                                </div>
                                            </div>
                                            <span class="review-date">${formattedDate}</span>
                                        </div>
                                        <div class="review-content">
                                            <p>${review.comment}</p>
                                        </div>
                                    </div>
                                `;
                            });
                        } else {
                            container.innerHTML = '<p>Все още няма отзиви.</p>';
                        }
                    })
                    .catch(error => {
                        console.error('Error loading reviews:', error);
                        document.getElementById('topReviews').innerHTML = '<p>Грешка при зареждане на отзивите.</p>';
                    });
            }

            document.getElementById('reviewForm')?.addEventListener('submit', async function(e) {
                e.preventDefault();

                const form = e.target;
                const formData = new FormData(form);
                const data = {
                    Comment: formData.get('Comment'),
                    Rating: parseInt(formData.get('Rating'))
                };

                try {
                    const response = await fetch('/Review/Create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        const successDiv = document.getElementById('reviewSuccess');
                        successDiv.textContent = 'Благодарим ви за вашия отзив!';
                        successDiv.style.display = 'block';
                        form.reset();

                        setTimeout(() => {
                            loadReviews();
                            successDiv.style.display = 'none';
                        }, 2000);
                    } else {
                        const error = await response.json();
                        alert(error.message || 'Грешка при изпращане на отзива');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Възникна грешка при изпращане на отзива');
                }
            });

            // Load reviews on page load
            loadReviews();
        });
    </script>
}